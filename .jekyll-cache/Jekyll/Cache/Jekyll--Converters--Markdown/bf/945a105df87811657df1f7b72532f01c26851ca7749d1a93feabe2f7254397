I"•<p>Fala, pessoal! Tudo bem? Hoje vou trazer pra voc√™s alguns m√≥dulos do <a href="https://pydata.org/">PyData Stack</a>, conjunto de ferramentas do Python voltadas para an√°lise de dados e machine learning.</p>

<p>Dentre os principais pacotes que formam o stack de ci√™ncia de dados do Python, est√£o o <a href="https://numpy.org/">NumPy</a>, Pandas, Matplotlib, SciPy, Scikit-Learn, Bokeh, StatsModels e o Seaborn. Pretendo mostrar um pouco de cada um deles neste post.</p>

<p>Lembrando que, caso voc√™ j√° utilize o Anaconda, todos os pacotes citados acima j√° est√£o inclu√≠dos.</p>

<h5 id="numpy">NumPy</h5>

<p>O NumPy √© um pacote voltado para computa√ß√£o matem√°tica, e um dos mais importantes do PyData Stack. Ele oferece as bases matem√°ticas necess√°rias para constru√ß√£o de modelos de deep learning, machine learning e, consequentemente, aplica√ß√µes de intelig√™ncia artificial. √â poss√≠vel utilizar os objetos nativos do NumPy para cria√ß√£o arrays ou matrizes, e assim usufruir das fun√ß√µes matem√°ticas oferecidas para opera√ß√µes com esses objetos.</p>

<p>Vamos come√ßar importando o NumPy. Tamb√©m √© poss√≠vel utilizar: from numpy import *  . Isso evitar√° a utiliza√ß√£o de np., mas este comando importar√° todos os m√≥dulos do NumPy.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Importando o NumPy
</span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
</code></pre></div></div>

<p>Agora vamos criar uma matriz e utilizar os m√©todos fornecidos pelo NumPy:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Array criado a partir de uma lista:
</span><span class="n">vetor1</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">])</span>

<span class="c1"># Usando m√©todos do array NumPy
</span><span class="n">vetor1</span><span class="o">.</span><span class="n">cumsum</span><span class="p">()</span>
<span class="c1">#=&gt; array([0,  1,  3,  6, 10, 15, 21, 28, 36])
</span>
<span class="c1"># Verificando o formato do array
</span><span class="k">print</span><span class="p">(</span><span class="n">vetor1</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="c1">#=&gt; (9,)
</span>
<span class="c1"># A fun√ß√£o arange cria um vetor contendo uma progress√£o aritm√©tica a partir de um intervalo - start, stop, step
</span><span class="n">vetor2</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="mf">0.</span><span class="p">,</span> <span class="mf">4.5</span><span class="p">,</span> <span class="mf">.5</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">vetor2</span><span class="p">)</span>
<span class="c1">#=&gt; [0.  0.5 1.  1.5 2.  2.5 3.  3.5 4. ]
</span>
<span class="k">print</span><span class="p">(</span><span class="n">vetor2</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>
<span class="c1">#=&gt; float64
</span></code></pre></div></div>

:ET