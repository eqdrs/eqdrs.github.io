I"[$<p>Fala, pessoal! Tudo bem? Hoje vou trazer pra voc√™s alguns m√≥dulos do <a href="https://pydata.org/">PyData Stack</a>, conjunto de ferramentas do Python voltadas para an√°lise de dados e machine learning.</p>

<p>Dentre os principais pacotes que formam o stack de ci√™ncia de dados do Python, est√£o o <a href="https://numpy.org/">NumPy</a>, <a href="https://pandas.pydata.org/">Pandas</a>, <a href="https://matplotlib.org/">Matplotlib</a>, <a href="https://www.scipy.org/">SciPy</a>, <a href="https://scikit-learn.org/">Scikit-Learn</a>, <a href="https://bokeh.pydata.org/en/latest/index.html">Bokeh</a>, <a href="https://www.statsmodels.org/">StatsModels</a> e o <a href="https://seaborn.pydata.org/">Seaborn</a>. Pretendo mostrar um pouco de cada um deles nesta sequ√™ncia de posts.</p>

<p>Lembrando que, caso voc√™ j√° utilize o Anaconda, todos os pacotes citados acima j√° est√£o inclusos.</p>

<h5 id="numpy">NumPy</h5>

<p>O NumPy √© um pacote voltado para computa√ß√£o matem√°tica, e um dos mais importantes do PyData Stack. Ele oferece as bases matem√°ticas necess√°rias para constru√ß√£o de modelos de deep learning, machine learning e, consequentemente, aplica√ß√µes de intelig√™ncia artificial. √â poss√≠vel utilizar os objetos nativos do NumPy para cria√ß√£o arrays ou matrizes, e assim usufruir das fun√ß√µes matem√°ticas oferecidas para opera√ß√µes com esses objetos.</p>

<p>Vamos come√ßar importando o NumPy. Tamb√©m √© poss√≠vel utilizar: from numpy import *  . Isso evitar√° a utiliza√ß√£o de np., mas este comando importar√° todos os m√≥dulos do NumPy.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Importando o NumPy
</span><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
</code></pre></div></div>

<p>Agora vamos criar uma matriz e utilizar os alguns dos m√©todos fornecidos pelo NumPy:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Criando uma matriz a partir de uma lista de listas
</span><span class="n">lista</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">13</span><span class="p">,</span><span class="mi">81</span><span class="p">,</span><span class="mi">22</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">59</span><span class="p">],</span> <span class="p">[</span><span class="mi">21</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">94</span><span class="p">]]</span>
<span class="n">matriz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">matrix</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>

<span class="nb">type</span><span class="p">(</span><span class="n">matriz</span><span class="p">)</span>
<span class="c1">#=&gt; numpy.matrixlib.defmatrix.matrix
</span>
<span class="c1"># Formato da matriz
</span><span class="n">np</span><span class="o">.</span><span class="n">shape</span><span class="p">(</span><span class="n">matriz</span><span class="p">)</span>
<span class="c1">#=&gt; (3, 3)
</span>
<span class="k">print</span><span class="p">(</span><span class="n">matriz</span><span class="o">.</span><span class="n">dtype</span><span class="p">)</span>
<span class="c1">#=&gt; int64
</span></code></pre></div></div>

<p>Tamb√©m podemos utilizar o NumPy para realizar opera√ß√µes estat√≠sticas, embora tenhamos outros pacotes do Python para isso, como por exemplo, o StatsModel, do qual irei falar na continua√ß√£o deste post. Vamos ao exemplo:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">15</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">75</span><span class="p">])</span>

<span class="c1"># Calculando a m√©dia dos valores
</span><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="c1">#=&gt; 54.0
</span>
<span class="c1"># Calculando o desvio padr√£o (varia√ß√£o ou dispers√£o que existe em rela√ß√£o √† m√©dia ou valor esperado)
</span><span class="n">np</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="c1">#=&gt; 30.34468652004828
</span>
<span class="c1"># Calculando a vari√¢ncia
</span><span class="n">np</span><span class="o">.</span><span class="n">var</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="c1">#=&gt; 920.8
</span></code></pre></div></div>

<h5 id="pandas">Pandas</h5>

<p>O Pandas √© uma esp√©cie de Excel para linguagem Python, com o qual √© poss√≠vel manipular dados estruturados das mais variadas formas. Ele √© um dos componentes principais no portif√≥lio Python para realizar an√°lise de dados, por tornar mais simples o <em>‚Äúslice and dice‚Äù</em> (fatiamento dos dados em diferentes perspectivas), al√©m de sele√ß√£o e agrega√ß√µes de subsets de dados.</p>

<p>Agora, vejamos como criar e manipular dataframes usando o Pandas. <em>Dataframes</em> s√£o estruturas muito similares a uma planilha de Excel, ou uma tabela em um banco de dados relacional: possui linhas e colunas, onde s√£o armazenados dados estruturados.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pandas</span> <span class="kn">import</span> <span class="n">DataFrame</span>

<span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s">'Estado'</span><span class="p">:</span> <span class="p">[</span><span class="s">'Santa Catarina'</span><span class="p">,</span> <span class="s">'Paran√°'</span><span class="p">,</span> <span class="s">'Goi√°s'</span><span class="p">,</span> <span class="s">'Bahia'</span><span class="p">],</span> 
        <span class="s">'Ano'</span><span class="p">:</span> <span class="p">[</span><span class="mi">2002</span><span class="p">,</span> <span class="mi">2003</span><span class="p">,</span> <span class="mi">2004</span><span class="p">,</span> <span class="mi">2005</span><span class="p">],</span> 
        <span class="s">'Popula√ß√£o'</span><span class="p">:</span> <span class="p">[</span><span class="mf">1.5</span><span class="p">,</span> <span class="mf">1.7</span><span class="p">,</span> <span class="mf">3.6</span><span class="p">,</span> <span class="mf">2.4</span><span class="p">]}</span>
<span class="n">frame</span> <span class="o">=</span> <span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
<span class="n">frame</span>
<span class="c1">#=&gt;            Estado   Ano  Popula√ß√£o
#   0  Santa Catarina  2002        1.5
#   1          Paran√°  2003        1.7
#   2           Goi√°s  2004        3.6
#   3           Bahia  2005        2.4
</span>
<span class="nb">type</span><span class="p">(</span><span class="n">frame</span><span class="p">)</span>
<span class="c1">#=&gt; pandas.core.frame.DataFrame
</span>
<span class="n">frame</span><span class="p">[</span><span class="s">'Estado'</span><span class="p">]</span>
<span class="c1">#=&gt; 0    Santa Catarina
#   1            Paran√°
#   2             Goi√°s
#   3             Bahia
</span>
<span class="c1"># Resumo do Dataframe
</span><span class="n">frame</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
<span class="c1">#=&gt;                Ano  Popula√ß√£o
#   count     4.000000   4.000000
#   mean   2003.500000   2.300000
#   std       1.290994   0.948683
#   min    2002.000000   1.500000
#   25%    2002.750000   1.650000
#   50%    2003.500000   2.050000
#   75%    2004.250000   2.700000
#   max    2005.000000   3.600000
</span>
<span class="n">frame2</span><span class="o">.</span><span class="n">values</span>
<span class="c1">#=&gt; array([['Santa Catarina', 2002, 1.5],
#          ['Paran√°', 2003, 1.7],
#          ['Goi√°s', 2004, 3.6],
#          ['Bahia', 2005, 2.4]], dtype=object)
</span>
<span class="c1"># Visualizando uma coluna index
</span><span class="k">print</span><span class="p">(</span><span class="n">frame</span><span class="o">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">'Ano'</span><span class="p">))</span>
<span class="c1">#=&gt;               Estado  Popula√ß√£o
#   Ano                            
#   2002  Santa Catarina        1.5
#   2003          Paran√°        1.7
#   2004           Goi√°s        3.6
#   2005           Bahia        2.4
</span></code></pre></div></div>

<p>No pr√≥ximo post, irei falar um pouco sobre os demais pacotes do PyData Stack, com mais alguns exemplos! At√© mais! üë®‚Äçüíª</p>

:ET